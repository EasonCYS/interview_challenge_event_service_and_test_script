-- MySQL Script generated by MySQL Workbench
-- Mon Jul 15 00:17:31 2019
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema mydb
-- -----------------------------------------------------
-- -----------------------------------------------------
-- Schema event
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema event
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `event` DEFAULT CHARACTER SET latin1 ;
USE `event` ;

-- -----------------------------------------------------
-- Table `event`.`event_category`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `event`.`event_category` (
  `id` INT(11) NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(45) NULL DEFAULT NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB
AUTO_INCREMENT = 4
DEFAULT CHARACTER SET = latin1;


-- -----------------------------------------------------
-- Table `event`.`user`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `event`.`user` (
  `id` INT(11) NOT NULL AUTO_INCREMENT,
  `email` VARCHAR(45) NULL DEFAULT NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB
AUTO_INCREMENT = 3
DEFAULT CHARACTER SET = latin1;


-- -----------------------------------------------------
-- Table `event`.`event`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `event`.`event` (
  `id` INT(11) NOT NULL AUTO_INCREMENT,
  `user_id` INT(11) NULL DEFAULT NULL,
  `title` VARCHAR(50) NULL DEFAULT NULL,
  `description` VARCHAR(1000) NULL DEFAULT NULL,
  `start_time` DATETIME NULL DEFAULT CURRENT_TIMESTAMP,
  `end_time` DATETIME NULL DEFAULT CURRENT_TIMESTAMP,
  `category_id` INT(11) NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  INDEX `FK_Event_Category_idx` (`category_id` ASC) VISIBLE,
  INDEX `IDX_Title` (`user_id` ASC, `end_time` ASC, `title` ASC) VISIBLE,
  INDEX `IDX_End_Time` (`user_id` ASC, `end_time` ASC) VISIBLE,
  INDEX `IDX_StartTime` (`user_id` ASC, `end_time` ASC, `start_time` ASC) VISIBLE,
  INDEX `IDX_Description` (`user_id` ASC, `end_time` ASC, `description` ASC) VISIBLE,
  CONSTRAINT `FK_Event_Category`
    FOREIGN KEY (`category_id`)
    REFERENCES `event`.`event_category` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `FL_User`
    FOREIGN KEY (`user_id`)
    REFERENCES `event`.`user` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
AUTO_INCREMENT = 217
DEFAULT CHARACTER SET = latin1;

USE `event` ;

-- -----------------------------------------------------
-- procedure sp_GetEventsByUserId
-- -----------------------------------------------------

DELIMITER $$
USE `event`$$
CREATE DEFINER=`eason`@`%` PROCEDURE `sp_GetEventsByUserId`(
	IN p_user_id INT, 
	IN p_sort_key VARCHAR(20), 
	IN p_order VARCHAR(20),
    IN p_end_time_range DATETIME
    )
BEGIN
if p_order = 'desc' then
	SET @s=CONCAT('SELECT * FROM event WHERE user_id =', p_user_id,' AND end_time > "',p_end_time_range,'" ORDER BY ', p_sort_key , ' desc LIMIT 1000;');
	PREPARE stmt1 FROM @s;
	EXECUTE stmt1;
	DEALLOCATE PREPARE stmt1;
else
	SET @s=CONCAT('SELECT * FROM event WHERE user_id =', p_user_id,' AND end_time > "',p_end_time_range,'" ORDER BY ', p_sort_key , ' asc LIMIT 1000;');
	PREPARE stmt1 FROM @s;
	EXECUTE stmt1;
	DEALLOCATE PREPARE stmt1;
end if;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_delete_event
-- -----------------------------------------------------

DELIMITER $$
USE `event`$$
CREATE DEFINER=`eason`@`%` PROCEDURE `sp_delete_event`(IN p_user_id int(11), IN p_id int(11))
BEGIN
DELETE FROM `event`.`event`
WHERE `user_id` = p_user_id AND `id` = p_id;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_insert_event
-- -----------------------------------------------------

DELIMITER $$
USE `event`$$
CREATE DEFINER=`eason`@`%` PROCEDURE `sp_insert_event`(
	IN p_user_id int(11),
	IN p_title varchar(50), 
	IN p_description varchar(1000), 
    IN p_start_time datetime,
    IN p_end_time datetime,
    IN p_category_id int(11))
BEGIN
INSERT INTO event(user_id, title, description, start_time, end_time, category_id) VALUES (p_user_id, p_title, p_description, p_start_time, p_end_time, p_category_id);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_update_event
-- -----------------------------------------------------

DELIMITER $$
USE `event`$$
CREATE DEFINER=`eason`@`%` PROCEDURE `sp_update_event`(
	IN p_id int(11),
	IN p_user_id int(11),
	IN p_title varchar(50), 
	IN p_description varchar(1000), 
    IN p_start_time datetime,
    IN p_end_time datetime,
    IN p_category_id int(11))
BEGIN
UPDATE `event`.`event`
SET
`title` = p_title,
`description` = p_description,
`start_time` = p_start_time,
`end_time` = p_end_time,
`category_id` = p_category_id
WHERE `id` = p_id AND `user_id` = p_user_id;
END$$

DELIMITER ;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
